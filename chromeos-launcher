#!/bin/bash

# スクリプトがエラーで停止するように設定
set -euo pipefail

# --- グローバル変数と設定 ---

# 設定ファイルを保存するメインディレクトリ
CONFIG_DIR="$HOME/.chromeos-launcher"
# 各仮想マシンの設定ファイルを保存するディレクトリ
MACHINES_DIR="$CONFIG_DIR/machines"
# 最後に実行したVMの名前を保存するファイル
LAST_RUN_FILE="$CONFIG_DIR/last_run"

# --- ヘルパー関数 ---

# ヘルプメッセージを表示する関数
usage() {
    cat <<EOF
ChromeOS QEMU Launcher

A script to easily create, run, and manage ChromeOS virtual machines.

Usage:
  $(basename "$0") <command> [options]

Commands:
  new       Create a new ChromeOS virtual machine and start installation.
  run       Run an existing virtual machine.
  rm        Remove a virtual machine and its data.
  --help    Show this help message.

For help with a specific command, run:
  $(basename "$0") <command> --help
EOF
}

# アーキテクチャを判別し、適切なQEMUバイナリを設定する関数
detect_arch() {
    case "$(uname -m)" in
        x86_64)
            QEMU_BINARY="qemu-system-x86_64"
            OVMF_CODE_PATH="/usr/share/OVMF/OVMF_CODE.fd"
            OVMF_VARS_TEMPLATE="/usr/share/OVMF/OVMF_VARS.fd"
            ;;
        aarch64)
            QEMU_BINARY="qemu-system-aarch64"
            # パスは環境によって異なる場合があります
            OVMF_CODE_PATH="/usr/share/AAVMF/AAVMF_CODE.fd"
            OVMF_VARS_TEMPLATE="/usr/share/AAVMF/AAVMF_VARS.fd"
            ;;
        *)
            echo "Error: Unsupported architecture '$(uname -m)'." >&2
            exit 1
            ;;
    esac

    if [ ! -f "$OVMF_CODE_PATH" ] || [ ! -f "$OVMF_VARS_TEMPLATE" ]; then
        echo "Error: OVMF/AAVMF firmware files not found." >&2
        echo "Please install OVMF (for x86_64) or AAVMF (for aarch64)." >&2
        exit 1
    fi
}

# パーセンテージ表記を絶対値に変換する関数
# $1: 値 (例: "8G", "50%")
# $2: 合計値 (メモリの場合はKB, CPUの場合はコア数)
# $3: 単位 (例: "M", "G")
resolve_value() {
    local value="$1"
    local total="$2"
    local unit="$3"

    if [[ "$value" == *"%"* ]]; then
        local percentage="${value//%}"
        # 少数点以下を切り捨て
        local result=$((total * percentage / 100))
        if [ "$unit" == "M" ]; then
            # KB to MB
            echo "$((result / 1024))M"
        elif [ "$unit" == "G" ]; then
             # KB to GB
            echo "$((result / 1024 / 1024))G"
        else
            echo "$result"
        fi
    else
        echo "$value"
    fi
}


# --- サブコマンド: new ---

usage_new() {
    cat <<EOF
Usage: $(basename "$0") new [options]

Creates a new ChromeOS virtual machine configuration and starts the installer.

Required Options:
  --name <name>       A unique name for the new virtual machine.
  --iso <path>        Path to the ChromeOS installation ISO image.
  --disk <path>       Path for the virtual disk. Can be a block device (/dev/sdX)
                      or a file path (will be created if it doesn't exist).

Optional Options:
  --disk-size <size>  Size for the new disk image if a file path is provided
                      (e.g., 64G). (Default: 64G)
  --cpu-cores <n|p%>  Number of CPU cores or percentage of total cores.
                      (e.g., 4 or 50%). (Default: 2)
  --memory <n|p%>     Amount of RAM or percentage of total RAM.
                      (e.g., 8G or 50%). (Default: 4G)
  --cpu-model <model> CPU model to emulate. (Default: host)
EOF
}

cmd_new() {
    # デフォルト値
    local vm_name=""
    local iso_path=""
    local disk_path=""
    local disk_size="64G"
    local cpu_cores="2"
    local memory="4G"
    local cpu_model="host"

    # 引数のパース
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --name) vm_name="$2"; shift 2 ;;
            --iso) iso_path="$2"; shift 2 ;;
            --disk) disk_path="$2"; shift 2 ;;
            --disk-size) disk_size="$2"; shift 2 ;;
            --cpu-cores) cpu_cores="$2"; shift 2 ;;
            --memory) memory="$2"; shift 2 ;;
            --cpu-model) cpu_model="$2"; shift 2 ;;
            --help) usage_new; exit 0 ;;
            *) echo "Unknown option: $1" >&2; usage_new; exit 1 ;;
        esac
    done

    # 必須オプションのチェック
    if [ -z "$vm_name" ] || [ -z "$iso_path" ] || [ -z "$disk_path" ]; then
        echo "Error: --name, --iso, and --disk are required." >&2
        usage_new
        exit 1
    fi

    local config_file="$MACHINES_DIR/$vm_name"
    if [ -f "$config_file" ]; then
        echo "Error: A virtual machine named '$vm_name' already exists." >&2
        exit 1
    fi

    # ディスクの準備
    if [ ! -b "$disk_path" ] && [ ! -f "$disk_path" ]; then
        echo "Disk image not found. Creating new image at '$disk_path' with size $disk_size..."
        qemu-img create -f raw "$disk_path" "$disk_size"
    fi

    # 設定ファイルを作成
    echo "Creating configuration file at '$config_file'..."
    mkdir -p "$MACHINES_DIR"
    {
        echo "VM_NAME='$vm_name'"
        echo "ISO_PATH='$iso_path'"
        echo "DISK_PATH='$disk_path'"
        echo "CPU_CORES='$cpu_cores'"
        echo "MEMORY='$memory'"
        echo "CPU_MODEL='$cpu_model'"
    } > "$config_file"

    echo "Configuration for '$vm_name' created successfully."
    echo "Starting installation..."

    # インストールを開始
    run_qemu "$vm_name" "install"
}


# --- サブコマンド: run ---

usage_run() {
    cat <<EOF
Usage: $(basename "$0") run [name]

Runs a specified virtual machine.
If no name is provided, it runs the last executed machine.
EOF
}

cmd_run() {
    local vm_name="${1:-}"

    if [ -z "$vm_name" ]; then
        if [ -f "$LAST_RUN_FILE" ]; then
            vm_name=$(cat "$LAST_RUN_FILE")
            echo "No name specified, running last used machine: $vm_name"
        else
            echo "Error: No machine name specified and no last-run machine found." >&2
            usage_run
            exit 1
        fi
    fi

    if [ "$vm_name" == "--help" ]; then
        usage_run
        exit 0
    fi

    run_qemu "$vm_name" "normal"
}


# --- サブコマンド: rm ---

usage_rm() {
    cat <<EOF
Usage: $(basename "$0") rm <name>

Removes a virtual machine's configuration.
It will also offer to delete the associated disk image if it's a regular file.
EOF
}

cmd_rm() {
    local vm_name="${1:-}"

    if [ -z "$vm_name" ] || [ "$vm_name" == "--help" ]; then
        usage_rm
        exit 1
    fi

    local config_file="$MACHINES_DIR/$vm_name"
    if [ ! -f "$config_file" ]; then
        echo "Error: No virtual machine named '$vm_name' found." >&2
        exit 1
    fi

    # 設定を読み込む
    source "$config_file"

    read -p "Are you sure you want to remove the VM '$vm_name'? [y/N] " -n 1 -r
    echo
    if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
        echo "Removal cancelled."
        exit 0
    fi

    # ディスクファイルの処理
    if [ -f "$DISK_PATH" ]; then
        read -p "Do you also want to delete the disk file '$DISK_PATH'? [y/N] " -n 1 -r
        echo
        if [[ "$REPLY" =~ ^[Yy]$ ]]; then
            echo "Deleting disk file: $DISK_PATH"
            rm -f "$DISK_PATH"
        fi
    elif [ -b "$DISK_PATH" ]; then
        echo "Warning: The disk path '$DISK_PATH' is a block device and will not be deleted."
    fi
    
    # 設定に関連するファイルを削除
    echo "Deleting VM configuration for '$vm_name'."
    rm -f "$config_file"
    rm -f "$MACHINES_DIR/${vm_name}.vars" # OVMF_VARSのコピーも削除

    if [ -f "$LAST_RUN_FILE" ] && [ "$(cat "$LAST_RUN_FILE")" == "$vm_name" ]; then
        rm -f "$LAST_RUN_FILE"
    fi

    echo "Successfully removed '$vm_name'."
}

# --- QEMU実行関数 ---

run_qemu() {
    local vm_name="$1"
    local mode="$2" # "install" or "normal"
    local config_file="$MACHINES_DIR/$vm_name"
    
    if [ ! -f "$config_file" ]; then
        echo "Error: Configuration for '$vm_name' not found." >&2
        exit 1
    fi

    # 設定を読み込む
    source "$config_file"

    # リソースを解決
    local total_mem_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    local total_cores=$(nproc)
    local resolved_mem=$(resolve_value "$MEMORY" "$total_mem_kb" "G")
    local resolved_cores=$(resolve_value "$CPU_CORES" "$total_cores")

    # UEFI変数の準備
    local ovmf_vars_copy="$MACHINES_DIR/${vm_name}.vars"
    if [ ! -f "$ovmf_vars_copy" ]; then
        echo "Copying UEFI variables template..."
        cp "$OVMF_VARS_TEMPLATE" "$ovmf_vars_copy"
    fi

    # QEMU引数配列を構築
    local qemu_args=(
        "-m" "$resolved_mem"
        "-smp" "$resolved_cores"
        "-cpu" "$cpu_model"
        "-enable-kvm"
        "-device" "virtio-vga-gl"
        "-display" "sdl,gl=on"
        "-usb"
        "-device" "usb-tablet"
        "-audiodev" "sdl,id=audio0"
        "-device" "intel-hda"
        "-device" "hda-output,audiodev=audio0"
        "-drive" "if=pflash,format=raw,readonly=on,file=$OVMF_CODE_PATH"
        "-drive" "if=pflash,format=raw,file=$ovmf_vars_copy"
        "-drive" "format=raw,file=$DISK_PATH"
    )

    if [ "$mode" == "install" ]; then
        qemu_args+=(
            "-cdrom" "$ISO_PATH"
            "-boot" "order=d"
        )
    fi

    echo "---"
    echo "Starting QEMU for '$vm_name'..."
    echo "  QEMU Binary: $QEMU_BINARY"
    echo "  Memory: $resolved_mem"
    echo "  CPU Cores: $resolved_cores"
    echo "  Disk: $DISK_PATH"
    [ "$mode" == "install" ] && echo "  ISO (Install Mode): $ISO_PATH"
    echo "---"

    # 最終実行マシンを記録
    echo "$vm_name" > "$LAST_RUN_FILE"

    # QEMUを実行
    exec "$QEMU_BINARY" "${qemu_args[@]}"
}


# --- メインロジック ---

# スクリプトの初期化
detect_arch
mkdir -p "$MACHINES_DIR"

# 引数がない場合はヘルプを表示
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

# サブコマンドをパースして実行
subcommand="$1"
shift
case "$subcommand" in
    new)
        cmd_new "$@"
        ;;
    run)
        cmd_run "$@"
        ;;
    rm)
        cmd_rm "$@"
        ;;
    --help|-h)
        usage
        ;;
    *)
        echo "Error: Unknown command '$subcommand'" >&2
        usage
        exit 1
        ;;
esac